@page "/todo"
@inject HttpClient Http
@using ToDoApp.Entity.Entities
@using ToDoApp.Entity.Enums

<h1>To Do</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (toDoList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead class="thead-dark">
            <tr>
                <th scope="col">Created date</th>
                <th scope="col">Description</th>
                <th scope="col">Status</th>
                <th scope="col">Start</th>
                <th scope="col">Complete</th>
                <th scope="col">Delete</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var toDo in toDoList)
            {
                <tr class="@(@toDo.Status==Status.Completed?"table-success":@toDo.Status==Status.InProgress?"table-warning":"table-primary")">
                    <td>@toDo.CreatedDate.ToShortDateString()</td>
                    <td>@toDo.Description</td>
                    <td>@toDo.Status.ToString()</td>
                    <td><button onclick="@(() => StartTodo(toDo.Id))"><i class="oi oi-media-play"></i></button></td>
                    <td><button onclick="@(() => CompleteTodo(toDo.Id))"><i class="oi oi-check"></i></button></td>
                    <td><button onclick="@(() => RemoveTodo(toDo.Id))"><i class="oi oi-trash"></i></button></td>
                </tr>
            }
        </tbody>
    </table>
}

@if (toDoList != null)
{
    <div class="form-inline">
        <input class="form-control col-mb-4" placeholder="Add new item" bind="@newItem" />
        <button class="btn btn-primary col-mb-2" onclick="@AddTodo">Create</button>
    </div>
}

@functions {
    List<ToDoItem> toDoList;
    private string newItem;

    protected override async Task OnInitAsync()
    {
        toDoList = await Http.GetJsonAsync<List<ToDoItem>>("api/todo");
    }

    private void AddTodo()
    {
        if (!string.IsNullOrWhiteSpace(newItem))
        {
            toDoList.Add(new ToDoItem(newItem));
            Http.SendJsonAsync(HttpMethod.Post, "api/todo", new { description = newItem });
            newItem = string.Empty;
        }
    }

    private void RemoveTodo(Guid guid)
    {
        toDoList.Remove(toDoList.First(x => x.Id.Equals(guid)));
        Http.SendJsonAsync(HttpMethod.Delete, "api/todo", new { id = guid });
    }

    private void StartTodo(Guid guid)
    {
        UpdateTodo(guid, Status.InProgress);
    }

    private void CompleteTodo(Guid guid)
    {
        UpdateTodo(guid, Status.Completed);
    }

    private void UpdateTodo(Guid guid, Status status)
    {
        var todo = toDoList.First(x => x.Id.Equals(guid));
        todo.SetStatus(status);
        Http.SendJsonAsync(HttpMethod.Put, "api/todo", new { id = guid, description = todo.Description, status = todo.Status });
    }
}
